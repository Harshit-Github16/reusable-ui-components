{"version":3,"file":"parse-path.js","sources":["../../../../../../../../../node_modules/next/dist/shared/lib/router/utils/parse-path.js"],"sourcesContent":["/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"parsePath\", {\n    enumerable: true,\n    get: function() {\n        return parsePath;\n    }\n});\nfunction parsePath(path) {\n    const hashIndex = path.indexOf('#');\n    const queryIndex = path.indexOf('?');\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : '',\n            hash: hashIndex > -1 ? path.slice(hashIndex) : ''\n        };\n    }\n    return {\n        pathname: path,\n        query: '',\n        hash: ''\n    };\n}\n\n//# sourceMappingURL=parse-path.js.map"],"names":["parsePath","path","hashIndex","indexOf","queryIndex","hasQuery","pathname","substring"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAQAA,IAAAA,SAAAA,SAAAA,CAAAC,IAAA,EAAA;AAEA,MAAA,MAAOC,SAAA,GAAAD,IAAA,CAAAE,OAAA,CAAA,GAAA,CAAA;YAAEC,UAAW,GAAAH,IAAA,CAAAE,OAAA,CAAA,GAAA,CAAA;AAAAE,MAAAA,MAAAA,QAAA,GAAAD,UAAA,GAAA,EAAA,KAAAF,SAAA,GAAAE,CAAAA,IAAAA,UAAA,GAAAF,SAAA,CAAA;AAAAG,MAAAA,IAAAA,QAAA,IAAAH,SAAA,GAAA,EAAA,EAAA;AAAA,QAAA,OAAA;UACpBI,QAAA,EAAAL,IAAA,CAAAM,SAAA,IAAAF,QAAA,GAAAD,UAAA,GAAAF,SAAA,CAAA;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}