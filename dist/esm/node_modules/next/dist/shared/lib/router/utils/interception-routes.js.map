{"version":3,"file":"interception-routes.js","sources":["../../../../../../../../../node_modules/next/dist/shared/lib/router/utils/interception-routes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    INTERCEPTION_ROUTE_MARKERS: null,\n    extractInterceptionRouteInformation: null,\n    isInterceptionRouteAppPath: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    INTERCEPTION_ROUTE_MARKERS: function() {\n        return INTERCEPTION_ROUTE_MARKERS;\n    },\n    extractInterceptionRouteInformation: function() {\n        return extractInterceptionRouteInformation;\n    },\n    isInterceptionRouteAppPath: function() {\n        return isInterceptionRouteAppPath;\n    }\n});\nconst _apppaths = require(\"./app-paths\");\nconst INTERCEPTION_ROUTE_MARKERS = [\n    '(..)(..)',\n    '(.)',\n    '(..)',\n    '(...)'\n];\nfunction isInterceptionRouteAppPath(path) {\n    // TODO-APP: add more serious validation\n    return path.split('/').find((segment)=>INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m))) !== undefined;\n}\nfunction extractInterceptionRouteInformation(path) {\n    let interceptingRoute, marker, interceptedRoute;\n    for (const segment of path.split('/')){\n        marker = INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m));\n        if (marker) {\n            ;\n            [interceptingRoute, interceptedRoute] = path.split(marker, 2);\n            break;\n        }\n    }\n    if (!interceptingRoute || !marker || !interceptedRoute) {\n        throw Object.defineProperty(new Error(\"Invalid interception route: \" + path + \". Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>\"), \"__NEXT_ERROR_CODE\", {\n            value: \"E269\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    interceptingRoute = (0, _apppaths.normalizeAppPath)(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n    ;\n    switch(marker){\n        case '(.)':\n            // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n            if (interceptingRoute === '/') {\n                interceptedRoute = \"/\" + interceptedRoute;\n            } else {\n                interceptedRoute = interceptingRoute + '/' + interceptedRoute;\n            }\n            break;\n        case '(..)':\n            // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n            if (interceptingRoute === '/') {\n                throw Object.defineProperty(new Error(\"Invalid interception route: \" + path + \". Cannot use (..) marker at the root level, use (.) instead.\"), \"__NEXT_ERROR_CODE\", {\n                    value: \"E207\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            interceptedRoute = interceptingRoute.split('/').slice(0, -1).concat(interceptedRoute).join('/');\n            break;\n        case '(...)':\n            // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n            interceptedRoute = '/' + interceptedRoute;\n            break;\n        case '(..)(..)':\n            // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n            const splitInterceptingRoute = interceptingRoute.split('/');\n            if (splitInterceptingRoute.length <= 2) {\n                throw Object.defineProperty(new Error(\"Invalid interception route: \" + path + \". Cannot use (..)(..) marker at the root level or one level up.\"), \"__NEXT_ERROR_CODE\", {\n                    value: \"E486\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            interceptedRoute = splitInterceptingRoute.slice(0, -2).concat(interceptedRoute).join('/');\n            break;\n        default:\n            throw Object.defineProperty(new Error('Invariant: unexpected marker'), \"__NEXT_ERROR_CODE\", {\n                value: \"E112\",\n                enumerable: false,\n                configurable: true\n            });\n    }\n    return {\n        interceptingRoute,\n        interceptedRoute\n    };\n}\n\n//# sourceMappingURL=interception-routes.js.map"],"names":["_export","target","all","Object","defineProperty","name","get","isInterceptionRouteAppPath","_apppaths","require$$0","INTERCEPTION_ROUTE_MARKERS","path","split","find","segment","m","startsWith","undefined","extractInterceptionRouteInformation","interceptingRoute","marker","interceptedRoute","Error","value","configurable","normalizeAppPath","enumerable","slice","concat","join","splitInterceptingRoute","length"],"mappings":"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","x_google_ignoreList":[0]}