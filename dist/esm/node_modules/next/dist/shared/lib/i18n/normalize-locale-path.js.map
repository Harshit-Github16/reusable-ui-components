{"version":3,"file":"normalize-locale-path.js","sources":["../../../../../../../../node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"normalizeLocalePath\", {\n    enumerable: true,\n    get: function() {\n        return normalizeLocalePath;\n    }\n});\n/**\n * A cache of lowercased locales for each list of locales. This is stored as a\n * WeakMap so if the locales are garbage collected, the cache entry will be\n * removed as well.\n */ const cache = new WeakMap();\nfunction normalizeLocalePath(pathname, locales) {\n    // If locales is undefined, return the pathname as is.\n    if (!locales) return {\n        pathname\n    };\n    // Get the cached lowercased locales or create a new cache entry.\n    let lowercasedLocales = cache.get(locales);\n    if (!lowercasedLocales) {\n        lowercasedLocales = locales.map((locale)=>locale.toLowerCase());\n        cache.set(locales, lowercasedLocales);\n    }\n    let detectedLocale;\n    // The first segment will be empty, because it has a leading `/`. If\n    // there is no further segment, there is no locale (or it's the default).\n    const segments = pathname.split('/', 2);\n    // If there's no second segment (ie, the pathname is just `/`), there's no\n    // locale.\n    if (!segments[1]) return {\n        pathname\n    };\n    // The second segment will contain the locale part if any.\n    const segment = segments[1].toLowerCase();\n    // See if the segment matches one of the locales. If it doesn't, there is\n    // no locale (or it's the default).\n    const index = lowercasedLocales.indexOf(segment);\n    if (index < 0) return {\n        pathname\n    };\n    // Return the case-sensitive locale.\n    detectedLocale = locales[index];\n    // Remove the `/${locale}` part of the pathname.\n    pathname = pathname.slice(detectedLocale.length + 1) || '/';\n    return {\n        pathname,\n        detectedLocale\n    };\n}\n\n//# sourceMappingURL=normalize-locale-path.js.map"],"names":["enumerable","get","normalizeLocalePath","cache","WeakMap","pathname","locales","lowercasedLocales","map","locale","toLowerCase","set","detectedLocale","segments","split","segment","index","indexOf"],"mappings":";;;;;AAYA,EAAA,8BAAA,GAAA,CAAA;;;;;;;AAXAA,MAAAA,UAAA,EAAO,IAAA;AAWPC,MAAAA,GAAA,cAAA;AAIA,QAAA,OAAAC,mBAAA;AACA;;;;;;;AAKIC,IAAAA,MAAAA,KAAA,OAAAC,OAAK,EAAA;aACTF,mBAAyBA,CAAAG,QAAA,EAAAC,OAAA,EAAA;AACzB;AAEA,MAAA,IAAI,CAAAA,OAAA,EAAA,OAAA;AAEJD,QAAAA;AACA,OAAA;AACA;AAEA,MAAA,IAAAE,iBAAA,GAAAJ,KAAA,CAAAF,GAAA,CAAAK,OAAA,CAAA;AACA,MAAA,IAAA,CAAAC,iBAAQ,EAAA;QACHA,iBAAA,GAAAD,OAAA,CAAAE,GAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAC,WAAA,EAAA,CAAA;AAAAP,QAAAA,KAAA,CAAAQ,GAAA,CAAAL,OAAA,EAAAC,iBAAA,CAAA;AAAA;AAEL,MAAA,IAAAK,cAAA;AACA;AAEA;AACA,MAAA,MAAAC,QAAA,GAAAR,QAAA,CAAAS,KAAA,CAA0B,GAAA,EAAA,CAAA,CAAA;AAC1B;AACA;AAAK,MAAA,IAAA,CAAAD,QAAA,CAAA,CAAA,CAAA,EAAA,OAAA;AAAAR,QAAAA;AAEL,OAAA;AACA;AAEA,MAAA,MAAAU,OAAA,GAAAF,QAAA,CAAA,CAAA,CAAA,CAAAH,WAAA,EAAA;AACA;AAEA;AAAKM,MAAAA,MAAAA,KAAA,GAAAT,iBAAA,CAAAU,OAAA,CAAAF,OAAA,CAAA;UAAAC,KAAA,GAAA,CAAA,EAAA,OAAA;AAAAX,QAAAA;AACL,OAAA;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}