{"version":3,"file":"interpolate-as.js","sources":["../../../../../../../../../node_modules/next/dist/shared/lib/router/utils/interpolate-as.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"interpolateAs\", {\n    enumerable: true,\n    get: function() {\n        return interpolateAs;\n    }\n});\nconst _routematcher = require(\"./route-matcher\");\nconst _routeregex = require(\"./route-regex\");\nfunction interpolateAs(route, asPathname, query) {\n    let interpolatedRoute = '';\n    const dynamicRegex = (0, _routeregex.getRouteRegex)(route);\n    const dynamicGroups = dynamicRegex.groups;\n    const dynamicMatches = // Try to match the dynamic route against the asPath\n    (asPathname !== route ? (0, _routematcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query;\n    interpolatedRoute = route;\n    const params = Object.keys(dynamicGroups);\n    if (!params.every((param)=>{\n        let value = dynamicMatches[param] || '';\n        const { repeat, optional } = dynamicGroups[param];\n        // support single-level catch-all\n        // TODO: more robust handling for user-error (passing `/`)\n        let replaced = \"[\" + (repeat ? '...' : '') + param + \"]\";\n        if (optional) {\n            replaced = (!value ? '/' : '') + \"[\" + replaced + \"]\";\n        }\n        if (repeat && !Array.isArray(value)) value = [\n            value\n        ];\n        return (optional || param in dynamicMatches) && // Interpolate group into data URL if present\n        (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(// these values should be fully encoded instead of just\n        // path delimiter escaped since they are being inserted\n        // into the URL and we expect URL encoded segments\n        // when parsing dynamic route params\n        (segment)=>encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n    })) {\n        interpolatedRoute = '' // did not satisfy all requirements\n        ;\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n    }\n    return {\n        params,\n        result: interpolatedRoute\n    };\n}\n\n//# sourceMappingURL=interpolate-as.js.map"],"names":["defineProperty","enumerable","get","interpolateAs","_routematcher","require$$0","_routeregex","require$$1","route","asPathname","query","interpolatedRoute","dynamicRegex","getRouteRegex","dynamicGroups","groups","dynamicMatches","getRouteMatcher","params","Object","keys","every","param","value","repeat","optional","replaced","replace","map"],"mappings":";;;;;;;;;;;;;;AACA,KAAA,CAAA;UACA,CAAAA,sBAAW,EAAA,eAAA,EAAA;MACXC,UAAE,EAAA,IAAA;MAEEC,GAAA,EAAA,YAAgB;AAEpB,QAAA,OAAAC,aAAA;AACA;AAEA,KAAA,CAAA;AACAC,IAAAA,MAAAA,aAAM,GAAAC,sBAAsC,EAAA;AAGxCC,IAAAA,MAAAA,WAAM,GAAYC,oBAAA,EAAA;AAClBJ,IAAAA,SAAAA,aAAMA,CAAAK,KAAA,EAAAC,UAAgB,EAAAC,KAAmB,EAAA;AACzCC,MAAAA,IAAAA,iBAAoB,GAAA,EAAA;AAExBC,MAAAA,MAAAA,YAAA,GAAAN,IAAAA,WAAA,CAAAO,aAAA,EAAAL,KAAA,CAAA;YACIM,aAAA,GAAAF,YAAA,CAAAG,MAAA;YACAC,cAAA;;iBACA,KAAeR,KAAA,OAAAJ,aAAA,CAAAa,eAAA,EAAAL,YAAA,EAAAH,UAAA,CAAA,GAAA,EAAA;AAAA;;AAEX,MAAA,KAAA;AACQ,MAAA,iBAAA,GAAAD,KAAQ;AAA0BU,MAAAA,MAAAA,MAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAN,aAAA,CAAA;AAAM,MAAA,IAAA,CAAAI,MAAA,CAAAG,KAAA,CAAAC,KAAA,IAAA;AAExD,QAAA,IAAAC,KACA,GAAAP,cAAY;AAEZ,QAAA,MAAA;UAAAQ,MAAA;AAAAC,UAAAA;SACAX,GAAAA,aAAA,CAAAQ,KACY,CAAA;AAKZ;AACA;AACA,QAAA,IAAAI,QAAA,GAAA,GAAA,IAAAF,MAAA,GAAA,KAAA,SAAAF,KAAA,GAAA,GAAA;AACmB,QAAA,IAAAG,QAAA,EAAA;UAOnBC,QAAA,GAAA,CAAA,CAAAH,KAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAAG,QAAA,GAAA,GAAA;AACA;AAEKH,QAAAA,IAAAA,MAAAA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,EAAAA,KAAAA,GAAAA,CAAAA,KAAA,CACL;;;QAEAZ,iBAAA,GAAAA,iBAAA,CAAAgB,OAAA,CAAAD,QAAA,EAAAF,MAAA,GAAAD,KAAA,CAAAK,GAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}