'use strict';

var formatUrl = require('../../../../../../../_virtual/format-url.js');
require('../../../../../../@swc/helpers/cjs/_interop_require_wildcard.js');
var querystring = require('./querystring.js');
var _interop_require_wildcard = require('../../../../../../../_virtual/_interop_require_wildcard.js');

var hasRequiredFormatUrl;
function requireFormatUrl() {
  if (hasRequiredFormatUrl) return formatUrl.__exports;
  hasRequiredFormatUrl = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      formatUrl: function () {
        return formatUrl;
      },
      formatWithValidation: function () {
        return formatWithValidation;
      },
      urlObjectKeys: function () {
        return urlObjectKeys;
      }
    });
    const _interop_require_wildcard$1 = _interop_require_wildcard.__exports;
    const _querystring = /*#__PURE__*/_interop_require_wildcard$1._(querystring.__require());
    const slashedProtocols = /https?|ftp|gopher|file/;
    function formatUrl(urlObj) {
      let {
        auth,
        hostname
      } = urlObj;
      let protocol = urlObj.protocol || '';
      let pathname = urlObj.pathname || '';
      let hash = urlObj.hash || '';
      let query = urlObj.query || '';
      let host = false;
      auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';
      if (urlObj.host) {
        host = auth + urlObj.host;
      } else if (hostname) {
        host = auth + (~hostname.indexOf(':') ? "[" + hostname + "]" : hostname);
        if (urlObj.port) {
          host += ':' + urlObj.port;
        }
      }
      if (query && typeof query === 'object') {
        query = String(_querystring.urlQueryToSearchParams(query));
      }
      let search = urlObj.search || query && "?" + query || '';
      if (protocol && !protocol.endsWith(':')) protocol += ':';
      if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }
      if (hash && hash[0] !== '#') hash = '#' + hash;
      if (search && search[0] !== '?') search = '?' + search;
      pathname = pathname.replace(/[?#]/g, encodeURIComponent);
      search = search.replace('#', '%23');
      return "" + protocol + host + pathname + search + hash;
    }
    const urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
    function formatWithValidation(url) {
      if (process.env.NODE_ENV === 'development') {
        if (url !== null && typeof url === 'object') {
          Object.keys(url).forEach(key => {
            if (!urlObjectKeys.includes(key)) {
              console.warn("Unknown key passed via urlObject into url.format: " + key);
            }
          });
        }
      }
      return formatUrl(url);
    }
  })(formatUrl.__exports);
  return formatUrl.__exports;
}

exports.__require = requireFormatUrl;
//# sourceMappingURL=format-url.js.map
